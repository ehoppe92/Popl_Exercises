{\rtf1\ansi\ansicpg1252\cocoartf1347\cocoasubrtf570
{\fonttbl\f0\fmodern\fcharset0 Courier;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720
\pard\pardeftab720

\f0\fs24 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 MODULE BinaryTree;\
\
FROM STextIO IMPORT WriteString, WriteLn, SkipLine, ReadString;\
\
VAR zeichen: ARRAY[1..200] OF CHAR; (* to do: arbitrary number? *)\
VAR counter: CARDINAL;\
VAR zahlen: ARRAY[1..200] OF INTEGER;\
\
(*define the type of node in the tree*)\
\
\
TYPE NodePointer = POINTER TO Node;\
\pard\pardeftab720
\cf0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 TYPE functionPointer = PROCEDURE(node: NodePointer);\cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \
\pard\pardeftab720
\cf2 TYPE Node = RECORD\
			parent, left, right: NodePointer;\
			id: INTEGER;\
			visit: functionPointer;\
		  END;\
\
\
\pard\pardeftab720
\cf0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 (* QUICKSORT *)\
TYPE compareNumbers = PROCEDURE(INTEGER, INTEGER): INTEGER;\
\
PROCEDURE compare(a:INTEGER, b:INTEGER): INTEGER;\
BEGIN\
	IF(a<b)\
	THEN\
	RETURN -1\
	END; \
	\
	IF(a=b)\
	THEN\
	RETURN 0\
	END;\
	\
	IF(a>b)\
	THEN \
	RETURN 1\
	END;\
END compare;\
\
PROCEDURE print(node: NodePointer);\
BEGIN\
	(*print id on stdout*)\
END print;\
\
PROCEDURE quicksort(VAR array: ARRAY OF INTEGER, VAR first:INTEGER, VAR last:INTEGER, f: compareNumbers);\
\
\pard\pardeftab720
\cf0 \expnd0\expndtw0\kerning0
VAR pivotElement: INTEGER;\
VAR p: INTEGER;\
VAR i: INTEGER;\
VAR temp: INTEGER;\
\pard\pardeftab720
\cf0 \expnd0\expndtw0\kerning0
\
BEGIN\
	IF(compareNumbers(first, last) < 0)\
	THEN \
		(*Pivot Element berechnen*)\
		p:=first;\
		pivotElement:=array[first];\
		FOR i:=first+1 TO last DO\
			IF(array[i] <= pivotElement)\
			THEN \
				p:= p+1;\
				(*swap array[i], array[p]*)\
				temp:=array[i];\
				array[i]:=array[p];\
				array[p]:=temp;\
				(*swap ende*)\
			END; (*if*)\
		END; (*for*)\
		(*swap array[p], array[first]*)\
		temp:=array[p];\
		array[p]:=array[first];\
		array[first]:=temp;\
		(*swap ende*)\
		(* p = pivot element*)\
	(*Quicksort von links und rechts aufrufen*)\
	quicksort(array, first, p-1, f);\
	quicksort(array, p+1, last, f);\
	END; (*if*)\
\
END quicksort;\
(*QUICKSORT ENDE*)\cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \
\pard\pardeftab720
\cf2 \
(*TO DO: method: dft*)\
PROCEDURE dft(parent: NodePointer);\
BEGIN\
	(*some code*)\
END;\
\
\
(*main*)\
BEGIN\
	WriteString(\'84Give numbers separated by whitespaces\'93);\
	WriteLn;\
	\
	(*Zahlen einlesen*)\
\
	(* to do\'85\
		ReadString(Zeichen);\
		i:=1;\
	*)\
\
	(*Annahme: alle Nummern im array zahlen*)\
	(*sort the array*)\
	quicksort(array, array[0], array[100], compare);\
	(*allocate space for the nodes*)\
	(*assign function print so: node^.visit^:=print;*)\
	(*TO DO*)\
\
END BinaryTree.\
}